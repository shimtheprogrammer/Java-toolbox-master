
public class BackPropagation 
{
	public static void main(String args[])
	{
		int target = 1;
		double Lrate = 0.1, input1 = 0.1, input2 = 0.7, output, error;
		double I1weightA = 0.1, I1weightB = 0.3, I2weightA = 0.5, I2weightB = 0.2, AweightC = 0.2, BweightC = 0.1;
		double[][] weights = new double[][]{{0.1,0.3},{0.5,0.2},{0.2,0.1}};
		boolean stop = false;
		
		output = sigmoid((sigmoid(0.1*0.1+0.7*0.5))*0.2+(sigmoid(0.1*0.3+0.7*0.2))*0.1);
		
		System.out.printf("Output is %f\n",output);
		
		if(output == target)
		{
			stop = true;
		}
		
		error = output*(1 - output)*(target - output);
		
		AweightC = AweightC + Lrate * (error * (sigmoid(0.1*0.1+0.7*0.5)));
		BweightC = BweightC + Lrate * (error * (sigmoid(0.1*0.3+0.7*0.2)));
		
		error = output * AweightC * (output * (1 - output));
		
		I1weightA = I1weightA + error * 0.1;
		I2weightA = I2weightA + error * 0.1;
		
		error = output * BweightC * (output * (1 - output));
		
		I1weightB = I1weightB + error * 0.1;
		I2weightB = I2weightB + error * 0.1;
		
		System.out.printf("new weights for inpit 1 are\t %f\t%f\n",I1weightA,I1weightB);
		System.out.printf("new weights for inpit s are\t %f\t%f\n",I2weightA,I2weightB);
		System.out.printf("new weights for hidden layer are\t %f\t%f\n",AweightC,BweightC);
		
	}

	static double sigmoid(double out) 
	{
		return 1/(1+Math.pow(2.718281828,-out));
	}
}
