
public class ID3 
{
	
	public static String[][] training_data = new String[][]{{"red","square","big","like"},{"blue","square","big","like"},{"red","round","small","dislike"},{"green","square","small","dislike"},{"red","round","big","like"},{"green","round","big","dislike"}};
	public static int[][] training_set = new int[][]{{0,0,0,0},{1,0,0,0},{0,1,1,1},{2,0,1,1},{0,1,0,0},{2,1,0,1}};
	public static int[][] finale;
	
	public static void main(String[] args)
	{
		String[] info_gain = new String[]{"InfoGain Like","InfoGain Size","InfoGain Shape","InfoGain Color"}; 
		double[] infogain = new double[]{0,0,0,0};
		int x = 0, nx = 0, y = 0, ny = 0, z = 0, nz = 0, total = 0, k = 1;
		
		infogain[0] = entropy(3,3,0);
		System.out.printf("%s\t",info_gain[0]);
		System.out.printf("%f\n\n",infogain[0]);
		
		for(int i = 2; i >= 0 ; i--)
		{
			for(int j = 5; j >= 0 ; j--)
			{
				if(training_set[j][i] == 0 && training_set[j][3] == 0)
				{
					x++;
				}
				if(training_set[j][i] == 1 && training_set[j][3] == 0)
				{
					y++;
				}
				if(training_set[j][i] == 2 && training_set[j][3] == 0)
				{
					z++;
				}
				if(training_set[j][i] == 0 && training_set[j][3] == 1)
				{
					nx++;
				}
				if(training_set[j][i] == 1 && training_set[j][3] == 1)
				{
					ny++;
				}
				if(training_set[j][i] == 2 && training_set[j][3] == 1)
				{
					nz++;
				}
				total = x + y +z;
			}
			
			infogain[k] = infogain[0] - entropy(x,y,z);
			x=0;
			y=0;
			z=0;
			
			System.out.printf("%s\t",info_gain[k]);
			System.out.printf("%f\n",infogain[k]);
			k++;
		}
		
		//double show = entropy(9,5,0)- ((0.5) * entropy(3,4,0)) - ((0.5) * entropy(6,1,0));
		
		int o = 7, p =14;
		double show =  o / p;
		
		System.out.printf("\n\n final entropy  %f\t\n\n",show);
		
	}
	
	static double entropy(double x, double y, double z)
	{
		if(z == 0)
		{
			double show = ( ( -( x/( x+y ) )* logbase2( x/(x+y) ) ) + ( -( y/( x+y )) * logbase2( y/(x+y) ) ) );
			System.out.printf("\n\n entropy  %f\t\n\n",show);
			return ( ( -( x/( x+y ) )* logbase2( x/(x+y) ) ) + ( -( y/( x+y )) * logbase2( y/(x+y) ) ) );
		}
		else
		{
			double show = ( ( -( x/( x+y+z ) )* logbase2( x/(x+y+z) ) ) + ( -( y/( x+y+z )) * logbase2( y/(x+y+z) ) ) + ( -( z/( x+y+z )) * logbase2( z/(x+y+z) ) ));
			System.out.printf("\n\nentropy with z  %f\t\n\n",show);
			return ( ( -( x/( x+y+z ) )* logbase2( x/(x+y+z) ) ) + ( -( y/( x+y+z )) * logbase2( y/(x+y+z) ) ) + ( -( z/( x+y+z )) * logbase2( z/(x+y+z) ) ));
		}
	}
	
	static double logbase2( double x)
	{
		return ((Math.log(x)/(Math.log(2))));
	}
	
}
